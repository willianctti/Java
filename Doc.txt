		Variáveis e tipos de dados

Para declarar uma variável precisamos primerio declarar o tipo dela

 // Tipo nome
        byte numeroPequeno;

precisamos também inicializa-la

        byte numeroPequeno = 125;

e como imprimir essa variável no console?
        System.out.println(numeroPequeno); // Console é sysOut


todos os tipos de variáveis em numeros:

public static void main(String[] args) throws Exception {
        // Tipo nome
        byte numeroPequeno = 125;
        short numeroShow = 32760;
        int numeroInt = 3298238;
        long numeroEnorme = 29823984;

        System.out.println(numeroPequeno);
        System.out.println(numeroShow);
        System.out.println(numeroInt);
        System.out.println(numeroEnorme);

e todas as variáveis do java:
 public static void main(String[] args) throws Exception {
        // Tipo nome
        byte numeroPequeno = 125;
        short numeroShow = 32760;
        int numeroInt = 3298238;
        long numeroEnorme = 29823984l;

        // Variáveis do tipo ponto flutuante
        float peso = 70.2f;
        double pi = 3.1484389334894389;

        // Variáveis do tipo cartactere
        char letra = 'c';

        // Varíavel booleano
        boolean estouComFome = true;

        // Variável string
        String nome = "Willian";

        System.out.println(numeroPequeno);
        System.out.println(numeroShow);
        System.out.println(numeroInt);
        System.out.println(numeroEnorme);


    }









			Imprimir variaveis no console

A inicialização da variável tem que vir antes de usa-la:

public class App {
    public static void main(String[] args) throws Exception {
       String nomeCompleto;
       nomeCompleto = "Willian nicoletti";
        System.out.println(nomeCompleto);
    }
}


public class App {
    public static void main(String[] args) throws Exception {
       String filme = "Vingadores";
       int anoLancmento = 2015; 
       int duracao = 240;
       double nota = 8.5;
       
       System.out.println(filme);
       System.out.println(anoLancmento);
       System.out.println(duracao);
       System.out.println(nota);
    }
}


concatenação no java é feita com um +:
	System.out.println("O filme " + filme);


imprimindo dados com o sysout.format:
        System.out.format("O filme %s ", filme);


imprimir mensagens de erro:
	System.err.println(filme);

	


				Ler dados do teclado

Classe Scanner
um scanner é uma classe
precisa ser instanciada

 public static void main(String[] args) throws Exception {
       int numero;
    //    scanner -> classe
       Scanner leitor = new Scanner(System.in);
    }


   int numero;
    //    scanner -> classe
       Scanner leitor = new Scanner(System.in);
       numero = leitor.nextInt();

       System.out.println("Numero é" + numero);



		




			Operações Aritméticos e a classe Math


Soma
   public static void main(String[] args) throws Exception {
        int numeroA = 5;
        int numeroB = 9;
        int resultado = numeroA + numeroB;
        System.out.println(resultado);
    }

o mesmo para subtração 
+ soma
- subtração
* multiplicação
/ divisão




incremento

    public static void main(String[] args) throws Exception {
        int contador = 0;
        
        System.out.println(contador);

        contador = contador + 1;

    }


ou contador++ // contador = contador + 1;




precedência dos sinais

mesma lógica matématica que segue o padrão:
1a = *
2a = /
3a = + ou -

SE () então 1a (*, /)




classe Math

public class App {
    public static void main(String[] args) throws Exception {
        int numeroA = -5;
        int numerob = 15;

        int resultado = Math.abs(numeroA); // Numero absoluto
        int resultadoExpo = (int) Math.pow(10, 2); // exponênciação
        double arredondarCima = Math.ceil(10.53) ;   // Arredondar num. p cima
        double arredondaraixo = Math.floor(10.53) ;   // Arredondar num. p baixo



    }
}



math.random

      int dado6faces = (int) Math.random();  

como a math.random retorna um double precisamos dar um cache (conversão)

ou

 public static void main(String[] args) throws Exception {
      double dado6faces = Math.random();  
      System.out.println(dado6faces);
    }






Classe random 
  Random gerador = new Random();
      int numero = gerador.nextInt(6);		//entre 1 e 6
      System.out.println(numero);
    }









				Como criar condições em Java 


public class App {
    public static void main(String[] args) throws Exception {
        /* 
        >
        <
        <=
        >=
        ==
        != 
        

        && 
        !

        */ 
        boolean estaChovendo = false;
        if (estaChovendo) {
            System.out.println("ta chovendo");
        } else {
            System.out.println("nao ta chovendo");
        }
    }
}


Não muda muito de php, TS e js*********









				Como usar Switch Case em Java

 public static void main(String[] args) throws Exception {
        String personagem = "Eu";
        switch (personagem) {
            case "Willian": 
            System.out.println("Willian bonitão");
                break;
            case "Eu":
            System.out.println("Esse é o certo");
                break;
            case "Leo":
            System.out.println("Leo bonitão");
                break;
        } 
    }









			Como criar estruturas de repetição 



 public static void main(String[] args) throws Exception {

      // While (enquanto)   
      int contador = 0;
      while (contador < 5) {
        contador = contador + 1;
        System.out.println("Ola");
        System.out.println(contador);
      }


      // DO while
      do {
        contador = contador + 1;
        System.out.println("Ola");
        System.out.println(contador);
      } while (contador < 5);


      // For
      for(contador = 1; contador < 10; contador++) {
        System.out.println("Ola");
      }

    }







			Como criar Arrays (vetores)

	    String[] nomes = new String[5];

        nomes[0] = "João";
        nomes[1] = "WIllian";
        nomes[2] = "Lucas";
        nomes[3] = "Alex";
        nomes[4] = "Fernando";

        System.out.println(nomes[1]);
    }




        double[] temperaturas = new double[365];
        temperaturas[0] = 31.3;
        temperaturas[1] = 2.3;
        temperaturas[2] = 50.3;
        temperaturas[3] = 120.3;

        System.out.println("o valor da temp do dia 1 é: " + temperaturas[0]);

    }






				Compiladores

- operadores Aritméticos
- ""		Relacionais
- ""		Lógicos
- ""		Assignment
- Precedência






				For each


      int[] notas = new int[10];

        Random random = new Random();

        for (int i=0; i<notas.length; i++) {
            notas[i] = random.nextInt(10);
        }

        System.out.println("Usando o ForEach");
        for (int nota : notas) {
            System.out.println(nota);
        }
    }










		
			Orientação a Objetos: Classes e atributos


Criação dos objetos:


    public class Lampada {
        String modelo;
        String tensao;
        int potencia;
        String cor;
        String tipoLuz;



    }

Classes e métodos simples:



    public class Lampada {
        String modelo;
        String tensao;
        int potencia;
        String cor;
        String tipoLuz;

        void exibirAutonomia() {
            System.out.println("A autonomia do carro é:" + tensao + tipoLuz);
        }
 }



 Orientação a Objetos: Construtores: 	/** AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA


public class App {

   public class Circulo {
    double diametro;
    
    public Circulo(double x) {
        diametro = x;
    }
   }

   public static void main(String[] args) {
    // Circulo circ1 = new Circulo();

   }





   }




Orientação a Objetos: Modificadores private e public

public - Todo mundo pode ver
private - SOmente a própria classe pode ver


   public class Carro {
    String marca;
    private String modelo;
    private int numPassageiros;
    double capCombustivel;
    double consumoCombustivel;


    void exibirAutonomia() {
        System.out.println("A autonomia do carro é: " + this.capCombustivel * this.consumoCombustivel );
    }

    double obterAutonomia() {
        System.out.println("Método obterAutonomia foi chamado");
        return this.capCombustivel * this.consumoCombustivel;
    }

    double calcularCombustivel(double km) {
        double qtdCombustivel = km/this.consumoCombustivel;
        return qtdCombustivel;
    } 


   }


   public class TesteCarro {
    public void main(String[] args) {
        Carro carro = new Carro();
        carro.marca = "Fiat"; // Note que "Fiat" deve começar com letra maiúscula
        carro.modelo = "Teste";
        carro.numPassageiros = 12;

        // Exemplo de como chamar os métodos da classe Carro:
        carro.exibirAutonomia();
        double autonomia = carro.obterAutonomia();
        System.out.println("Autonomia obtida: " + autonomia);
        double combustivelNecessario = carro.calcularCombustivel(100);
        System.out.println("Quantidade de combustível necessária para percorrer 100 km: " + combustivelNecessario);
    }
}




 Orientação a Objetos: Encapsulamento: métodos getters e setter:

getters e setters geralmente são publicos.

public (obter valor retorna um valor então é necessário repetir o tipo do atributo)
public String getMarca(){
	return this.marca

}


public (void para settar)
public void setMarca(String marca) {
	this.marca = marca;
}

ex:

Carro van = new Carro();
van.setMarca("Fiat");
sysout(van.getmarca());


o encapsulamento é basicamente setar todos os atributos como private
e criar um metodo getter e setter para cada atributo desses



Orientação a Objetos: Sobrecarga de métodos e construtores (overload):

public class App {
   public class MinhaCalculadora {
    public int soma(int num1, int num2) {
        return num1 + num2;
    }
   



   }


}








				Recursividade



				Calculadora:

Esse foi um pequeno exercicio para testar meus básicos conhecimentos:
public class App {
    public static int soma(int num1, int num2) {
        return num1 + num2;
    }

    public static int sub(int num1, int num2) {
        return num1 - num2;
    }

    public static int div(int num1, int num2) {
        if (num2 == 0) {
            throw new IllegalArgumentException("Divisão por zero não é permitida.");
        }
        return num1 / num2;
    }
    
    public static int mult(int num1, int num2) {
        return num1 * num2;
    }



    public static void main(String[] args) {
        int resultado = soma(1, 1);
        System.out.println("Soma:" + resultado);

        resultado = sub(1, 1);
        System.out.println(resultado);

        resultado = mult(2, 4);
        System.out.println(resultado);

        try {
            resultado = div(6, 2);
            System.out.println("Divisão: " + resultado);
        } catch (IllegalArgumentException e) {
            System.out.println("Erro: " + e.getMessage());
        }
    }
    

}


revendo variaveis, tipo flutuante, double.... true/false, escopo de variáveis...
condicionais.


